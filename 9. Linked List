                                          :: ===========  INTRODUCTION  =========== ::
-------------------------------------------------------------------------------------------------------------------------------
          ARRAYLIST    V/S    LINKED LIST
Insert :=   O(n)     || < ||     O(1)  ==> Linked list is more efficient in case of inserting the element in middle because it's
                                           gives constant time complexity as compare to arraylist, so use LL whenever necessary.
 
Search :=   O(1)     || > ||     O(n)  ==> Arraylist is more efficient in case of Searching the element from the list because it's
                                           gives constant time complexity as compare to Linkedlist, so use AL whenever we need to 
                                           optimized TC.
                                           
 
 
                                           :: =========== BASIC PROPERTY ============ ::
---------------------------------------------------------------------------------------------------------------------------------

*  VARIABLE SIZE              = we can add as many as element we want until and unless our code memory not get full.
*  NON-CONTIGUOUS MEMORY      = Its not in kind array (means contineous), its kind of chunks or we can say NODE as well, 
                                who linked each other.
                                
 =>  KEY TO REMEMBER := Last NODE of the LL is link/connect TO "NULL NODE / EMPTY NODE" who is nothing but empty.
 
        __________
       |  DATA    |  => A Data Item (we can store integer, strings or any type of data).
       |__________|           
       | NEXT     |
       | REFERENCE|  => Pointer (Or Reference) to the next node (connects one node to another) or An address of another node
       |__________|
       

=> "HEAD" node is always the first node of linked list, if we store only first element of the linked list we can find the 
    whole/complete list, because of the reference store in the node.
    
      EXAMPLE :        (1)           (2)        (4)
                     " This "-------" is "    " list " -->> ðŸš« [NULL]       ==>> string linkedlist
                       /               \        /  \          
                    [HEAD]              \      /   [TAIL]        
                                         \    /
                                          " a "
                                           (3)
                                           
                                           
                                            
                                     :: ============= TYPES OF LINKED-LIST ============= ::
-------------------------------------------------------------------------------------------------------------------------------

class LL
{
    Node head;
    private int size;
    
    LL()
    {
      this.size = 0;
    }
    
    class Node
    {
        String data;
        Node next;
        Node(String data)
        {
            this.data = data;
            this.next = null;
            size++;
        }
    }
 

    // add - First,last
    public void addFirst(String data)
    {
        Node newNode = new Node(data);
        if(head == null)                        // check whether our ll is having node or not 
        {
            head = newNode;                    // if ll is empty then assign newNode to head which one and only one element
            return;
        }

        newNode.next = head;
        head = newNode;
    }
    public void addLast(String data)
    {
        Node newNode = new Node(data);
        if(head == null)
        {
            head = newNode;
            return;
        }

        Node currNode = head;
        while(currNode.next != null)
        {
            currNode = currNode.next;

        }
        currNode.next = newNode;
    }


   public void deleteFirst()
   {
     if(head == null)
     {
       System.out.print("List is empty")  ;   
       return;
     }
     
     size--;
     head = head.next;
     
   }
   
    public void deleteLast()
   {
      if(head == null)                  // corner case when list is empty
      {
        System.out.print("List is empty");     
        return;
      }
      
      size--;
      if(head.next == null)          // corner case when list having one node
      {
        head = null;
        return;
      }
     
      Node secondLast = head;      
      Node lastNode = head.next;   //  head.next = null -> lastNode = null
      
      while(lastNode.next != null)   // null.next which is nothing
      {
        lastNode = lastNode.next;
        secondLast = secondLast.next;
      }
      
      secondLast.next = null;
   }



    public void print()
    {
        if(head == null)
        {
             System.out.print("List is empty");
            return;
        }
        Node currNode = head;
        while(currNode != null)
        {
            System.out.print(currNode.data + " ");
            currNode = currNode.next;

        }
       

    }
    
    public int getSize()
    {
      return size;
    }
   


    public static void main(String args[])
    {
        LL list = new LL();
        list.addFirst("a");
        list.addFirst("is");
        list.addLast("list");
        list.addFirst("this");
        
        list.deleteFirst();
        list.deleteLast();
        list.print();
        
        System.out.print(list.getSize());
        
    }
}
       
 
